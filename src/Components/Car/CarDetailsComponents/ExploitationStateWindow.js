import {useTranslation} from "react-i18next";
import React, {useEffect, useState} from "react";
import {Link, useLocation} from "react-router-dom";
import {Button} from "react-bootstrap";


const ExploitationStateWindow = () => {
    const {t} = useTranslation();
    const fontColor = global.config.TileFontColor;
    const tileBgColor = global.config.TileBackgroundColor;
    const location = useLocation();
    const carId = location.state.carId;
    const [car, setCar] = useState([]);
    const buttonColorAccept = global.config.ButtonColorAccept;
    useEffect(() => {
        fetch(global.config.HostFront + '/api/cars/car/' + carId)
            .then(response => response.json())
            .then(data => {
                setCar(data);
                console.log(data);
            })
            .catch(error => {
                console.log('Error fetching data:', error);
            });
    }, [carId]);
    const formatDate = (dateString) => {
        const options = {year: 'numeric', month: '2-digit', day: '2-digit'};
        const date = new Date(dateString);
        return date.toLocaleDateString(undefined, options);
    };

    const renderExploitationItem = (itemName, course, date) => (
        <>
            <h6 className="card-title" style={{ color: global.config.TileFontColor }}>
                {t(itemName)}:
            </h6>
            <h6 className="card-subtitle">
                {course || date ? (
                    <>
                        {course && <>{`${course} km`}</>}
                        {course && date && <>{` | `}</>}
                        {date && <>{formatDate(date)}</>}
                    </>
                ) : (
                    t('noInfo')
                )}
            </h6>
        </>
    );

    return (

        <div className="col-md-4">

            <div className="card shadow" style={{background: tileBgColor}}>
                <h5 style={{color: fontColor}}>{t('exploitationService')}:</h5>

                {car.exploitationState && Object.keys(car.exploitationState).length > 0 && (
                    (
                    <div>
                        {renderExploitationItem('oilChange', car.exploitationState.lastOilChangeCourse, car.exploitationState.lastOilChangeDate)}
                        {renderExploitationItem('airFilterChange', car.exploitationState.lastAirFilterChangeCourse, car.exploitationState.lastAirFilterChangeDate)}
                        {renderExploitationItem('fuelFilterChange', car.exploitationState.lastFuelFilterChangeCourse, car.exploitationState.lastFuelFilterChangeDate)}
                        {renderExploitationItem('cabinFilterChange', car.exploitationState.lastCabinFilterChangeCourse, car.exploitationState.lastCabinFilterChangeDate)}
                        {renderExploitationItem('timingBeltChange', car.exploitationState.lastTimingBeltChangeCourse, car.exploitationState.lastTimingBeltChangeDate)}
                        {renderExploitationItem('coolantChange', car.exploitationState.lastCoolantChangeCourse, car.exploitationState.lastCoolantChangeDate)}
                        {renderExploitationItem('gearBoxOilChange', car.exploitationState.lastGearBoxOilChangeCourse, car.exploitationState.lastGearBoxOilChangeDate)}
                        {renderExploitationItem('powerSteeringFluidChange', car.exploitationState.lastPowerSteeringFluidChangeCourse, car.exploitationState.lastPowerSteeringFluidChangeDate)}
                        {renderExploitationItem('differentialOilChange', car.exploitationState.lastDifferentialOilChangeCourse, car.exploitationState.lastDifferentialOilChangeDate)}

                    </div>
                    ))}
                {!car.exploitationState || Object.keys(car.exploitationState).length === 0 && (
                    <p>{t('noInfo')}</p>
            )}
                <Link to={"/edit-exploitation-service"} state={{carId: carId}}>
                    <Button  className={`${buttonColorAccept}`}>
                        {t('editCarExploitation')}
                    </Button>
                </Link>
            </div>
        </div>)

};


export default ExploitationStateWindow;

